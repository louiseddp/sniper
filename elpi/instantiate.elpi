pred instantiate i: term, i: term, o: term.
    instantiate (prod _N Ty F) T (F T) :- coq.typecheck T TyT ok, coq.unify-leq TyT Ty ok. 
    instantiate T _ T. 

pred instantiate_term_list i: term, i: (list term), o: (list term).
    instantiate_term_list T [U|L] [V|M] :- !, instantiate T U V, 
    instantiate_term_list T L M. 
    instantiate_term_list _T [] [].

pred instantiate_list_list i: (list term), i: (list term), o: (list term).
    instantiate_list_list [ T| XS] L R :-
        instantiate_term_list T L R1, instantiate_list_list R1 L R1', 
        instantiate_list_list XS L R2, std.append R1' R2 R.
    instantiate_list_list [] _L [].

pred argument_of i: term, i: term, i: term, o: (list (pair term (list int))). 
    argument_of U X (prod _ Ty F) T :- !, argument_of U X Ty T1,
      pi y\ decl y _Na Ty => argument_of U X (F y) T2, append_nodup T1 T2 T.
    argument_of U X (fun _ Ty F) T :- !, argument_of U X Ty T1, 
      pi y\ decl y _Na Ty => argument_of U X (F y) T2, append_nodup T1 T2 T.
    argument_of U X (fix _ _ Ty F) T :- !, argument_of U X Ty T1, 
      pi y\ decl y _Na Ty => argument_of U X (F y) T2, append_nodup T1 T2 T.
    argument_of U X (let N Ty V F) T :- !, argument_of U X Ty T1, argument_of U X V T2,
        pi x\ def x N Ty V => argument_of U X (F x) T3, append_nodup T1 T2 T12,
        append_nodup T12 T3 T.
    argument_of U X (match _T _V L) R :- !, std.map L (argument_of U X) R', std.flatten R' R.
    argument_of U X (app [U| XS]) [pr U R1] :- coq.typecheck U _Ty ok, std.mem! XS X, !, find_occurences XS X R1.
    argument_of U X (app L) R :- std.map L (argument_of U X) R', std.flatten R' R.
    argument_of _U _X _T [].

pred indu_using_var i: term, o:  (list (pair term (list int))).
    indu_using_var (prod _ Ty F) R :-  pi x\ decl x _Na Ty => argument_of (global (indt I)) x (F x) R, not (R = []), coq.typecheck (global (indt I)) TyG ok, codomain_not_prop TyG ok.
    indu_using_var _ [].

pred cstr_using_var i: term, o:  (list (pair term (list int))).
    cstr_using_var (prod _ Ty F) R :-  pi x\ decl x _Na Ty => argument_of (global (indc C)) x (F x) R, not (R = []), 
        coq.typecheck (global (indc C)) TyG ok, codomain_not_prop TyG ok.
    cstr_using_var _ []. 

pred globals_using_var i: term, o: (list (pair term (list int))).
    globals_using_var T L :- indu_using_var T L1, cstr_using_var T L2, std.append L1 L2 L.

pred instances_param_indu_strategy_aux i: term, i: list (pair term (list term)),  i: list term, o: list term.
    instances_param_indu_strategy_aux ((prod _Na Ty _F) as I) L SubTy R' :- 
        (coq.unify-leq Ty {{ Type }} ok ; coq.unify-leq Ty {{ Set }} ok), globals_using_var I L', not (L' = []), !, 
        generate_instances_list I L' L R,
        instances_param_indu_strategy_aux_list R L SubTy R'.
    instances_param_indu_strategy_aux ((prod _Na Ty _F) as I) L SubTy R' :-
        (coq.unify-leq Ty {{ Type }} ok ; coq.unify-leq Ty {{ Set }} ok), globals_using_var I L', L' = [], !,  instantiate_term_list I SubTy R,
        instances_param_indu_strategy_aux_list R L SubTy R'.
    instances_param_indu_strategy_aux H _L _SubTy [H]. % no instances if the hypothesis is not polymorphic

pred instances_param_indu_strategy_aux_list i: list term, i: list (pair term (list term)), i: list term, o: list term.
    instances_param_indu_strategy_aux_list [H1 | HS ] L1 L2 R :- instances_param_indu_strategy_aux H1 L1 L2 R1, 
        instances_param_indu_strategy_aux_list HS L1 L2 R2, append_nodup R1 R2 R.
    instances_param_indu_strategy_aux_list [] _ _ [].

pred generate_instances_list i: term, i: (list (pair term (list int))), i: list (pair term (list term)), o: list term.
    generate_instances_list T [X|XS] ([_Y|_YS] as L) R :- !, generate_instances T X L R1, generate_instances_list T XS L R2,
        append_nodup R1 R2 R. 
    generate_instances_list _ [] _ [].

pred cstr_corresponding_indu i: term, o: term. %compute the inductive of a constructor or return the inductive if the input is already one
    cstr_corresponding_indu (global (indt _I) as U) U.
    cstr_corresponding_indu (global (indc C)) Indu :- coq.typecheck (global (indc C)) Ty ok, codomain Ty (app [Indu| _ ]).


pred filter_key i: term, i: list (pair term B), o: list B. %takes all the corresponding values for a given key (or the corresponding inductive) in a list of pairs
    filter_key X [pr X Y | XS] [Y|R] :- !, filter_key X XS R.
    filter_key X [pr X' Y | XS] [Y|R] :- cstr_corresponding_indu X' X, !, filter_key X XS R.
    filter_key X [_Y | XS] R :- filter_key X XS R.
    filter_key _X [] [].

% given a hypothesis to instantiate, a pair between a term Trm1 (inductive, constructor or variable) using the type variables and 
% their position in the nary application of Trm and a list of inductive paired with their instances,
% outputs the list of instances 
pred generate_instances i: term, i: (pair term (list int)), i: list (pair term (list term)), o: list term.
    generate_instances T P L R :- fst P Trm1, cstr_corresponding_indu Trm1 Trm, snd P Pos, 
        filter_key Trm L L', generate_instances_aux1 T Trm Pos L' R.

pred generate_instances_aux1 i: term, i: term, i: (list int), i: list (list term), o: list term.
    generate_instances_aux1 H Trm L [LT1|LTS] R :- !, generate_instances_aux2 H Trm L LT1 R1,
    generate_instances_aux1 H Trm L LTS R2,
    append_nodup R1 R2 R.
    generate_instances_aux1 _ _ _ [] []. 

pred generate_instances_aux2 i: term, i: term, i: (list int), i: (list term), o: list term.
    generate_instances_aux2 H Trm [N1|NS] L [H1|HS] :- !, nth N1 L Inst, instantiate H Inst H1, 
        generate_instances_aux2 H Trm NS L HS.
    generate_instances_aux2 _ _ [] _ [].