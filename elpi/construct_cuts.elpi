% the main fonction: assert the list of polymorphic instances and proves them
pred construct_cuts i: (list term), i: (pair term term), i: goal, o: list sealed-goal.
    construct_cuts [X|XS] P G GS :- !, construct_cuts_aux [X|XS] P G GS.
    construct_cuts [] (pr H _Ty) G [G'] :- 
        construct_term_applied_unit H Hunit,
        std.assert-ok! (coq.elaborate-ty-skeleton Hunit _ X1) "cut formula illtyped",
        construct_term_applied H Tapp,
        refine (app [(fun `new_hyp` X1 _), Tapp]) G [G'].
    construct_cuts [] (pr _H Ty) (goal Ctx _ _ _ _ as G) [G'] :- find_in_context Ty Ctx H',
        construct_term_applied_unit H' Hunit,
        std.assert-ok! (coq.elaborate-ty-skeleton Hunit _ X1) "cut formula illtyped",
        construct_term_applied H' Tapp, !,
        refine (app [(fun `new_hyp` X1 _), Tapp]) G [G'].

pred construct_cuts_aux i: (list term), i: (pair term term), i: goal, o: list sealed-goal.
    %when the polymorphic hypothesis is given as parameter
    construct_cuts_aux [X | XS] ((pr H _Ty) as P) (goal Ctx _ _ _ _ as G) [G''] :- std.rev Ctx Ctx', elim_pos_ctx Ctx' X X',
        std.assert-ok! (coq.elaborate-ty-skeleton X' _ X1) "cut formula illtyped",
        construct_term_applied H Tapp,
        refine (app [(fun `new_hyp` X1 _), Tapp]) G [G'], !, 
        coq.ltac.open (construct_cuts_aux XS P) G' [G''].
    %when the polymorphic hypothesis is in the context
    construct_cuts_aux [X | XS] ((pr _H Ty) as P) (goal Ctx _ _ _ _ as G) [G''] :- std.rev Ctx Ctx', elim_pos_ctx Ctx' X X',
        std.assert-ok! (coq.elaborate-ty-skeleton X' _ X1) "cut formula illtyped",
        find_in_context Ty Ctx Trm,
        construct_term_applied Trm Tapp,
        refine (app [(fun `new_hyp` X1 _), Tapp]) G [G'], !, 
        coq.ltac.open (construct_cuts_aux XS P) G' [G''].
        %when the types variables are not used
    construct_cuts_aux [X | XS] ((pr _H Ty) as P) (goal Ctx _ _ _ _ as G) [G''] :- std.rev Ctx Ctx', elim_pos_ctx Ctx' X X',
        std.assert-ok! (coq.elaborate-ty-skeleton X' _ X1) "cut formula illtyped",
        find_in_context Ty Ctx Trm,
        construct_term_applied_unit Trm Tapp,
        refine (app [(fun `new_hyp` X1 _), Tapp]) G [G'], !, 
        coq.ltac.open (construct_cuts_aux XS P) G' [G''].
    construct_cuts_aux [] _ _G _GL.

%utilities functions
pred args_to_terms i: (list argument), o: (list term).
    args_to_terms [trm X | XS] [X | R] :- args_to_terms XS R.
    args_to_terms [] [].

pred find_in_context i: term, i: goal-ctx, o: term.
    find_in_context Trm [decl Var _ Ty| _XS] Var :- coq.unify-leq Trm Ty ok, !.
    find_in_context Trm [_X | XS] Var :- find_in_context Trm XS Var.
    find_in_context Trm [] _ :- coq.error Trm "is not in the context".

pred number_of_polymorphic_variables i: term, o: int.
    number_of_polymorphic_variables (prod Na Ty F) N1 :- (coq.unify-leq Ty {{Type}} ok ; coq.unify-leq Ty {{Set}} ok), !,
        pi x\ decl x Na Ty => number_of_polymorphic_variables (F x) N, N1 is N + 1.
    number_of_polymorphic_variables _ 0.

pred construct_list i: int, o: list term. 
    construct_list N [ _| R] :- N > 0, !, M is (N - 1), construct_list M R.
    construct_list 0 []. 

pred construct_term_applied i: term, o: term.
    construct_term_applied I (app [I|L]) :- coq.typecheck I Ty ok, number_of_polymorphic_variables Ty NB, construct_list NB L.

% default case whenever no instances are found by our instantiation strategy
pred construct_list_unit i: int, o: list term. 
    construct_list_unit N [ {{unit}}| R] :- N > 0, !, M is (N - 1), construct_list_unit M R.
    construct_list_unit 0 []. 

pred construct_term_applied_unit i: term, o: term.
    construct_term_applied_unit I (app [I|L]) :- coq.typecheck I Ty ok, number_of_polymorphic_variables Ty NB, construct_list_unit NB L.