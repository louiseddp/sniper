% the type term is extended by one constructor, the position in the local context
type pos_ctx int -> term.

pred pos_ctx_to_var i: goal-ctx, i: term, o: term.
    pos_ctx_to_var Ctx (pos_ctx N) X :- nth N Ctx (decl X _ _).
    pos_ctx_to_var Ctx (pos_ctx N) X :- nth N Ctx (def X _ _ _).
    pos_ctx_to_var Ctx (app L) (app X) :- std.map L (pos_ctx_to_var Ctx) X.
    pos_ctx_to_var _ T T.

pred var_to_pos_ctx i: goal-ctx, i: term, o: term.
    var_to_pos_ctx Ctx X (pos_ctx N) :- nth N Ctx (decl X _ _).
    var_to_pos_ctx Ctx X (pos_ctx N) :- nth N Ctx (def X _ _ _).
    var_to_pos_ctx Ctx (app L) (app X) :- std.map L (var_to_pos_ctx Ctx) X.
    var_to_pos_ctx _ T T.

% version with the integer representing the position in the context already given and with two outputs
pred var_pos_ctx i: prop, i: int, o: term, o: term.
    var_pos_ctx (decl X _ _) I X (pos_ctx I).
    var_pos_ctx (def X _ _ _) I X (pos_ctx I).

pred add_pos_ctx_aux i: goal-ctx, i: int, i: term, o: term.
    add_pos_ctx_aux [X | XS] I A B :- var_pos_ctx X I T1 T2, (copy T1 T2 :- !) => (I' is I + 1, add_pos_ctx_aux XS I' A B).
    add_pos_ctx_aux [] _ A B :- copy A B.

pred add_pos_ctx i: goal-ctx, i: term, o: term. 
    add_pos_ctx L T1 T2 :- add_pos_ctx_aux L 0 T1 T2.

pred add_pos_ctx_pr i: goal-ctx, i: (list (pair term (list term))), o: (list (pair term (list term))).
    add_pos_ctx_pr Ctx [pr T L | XS] [pr T L'|XS'] :- std.map L (add_pos_ctx Ctx) L', add_pos_ctx_pr Ctx XS XS'.
    add_pos_ctx_pr _ [] [].

pred elim_pos_ctx_aux i: goal-ctx, i: int, i: term, o: term.
    elim_pos_ctx_aux [X | XS] I A B :- var_pos_ctx X I T1 T2, (copy T2 T1 :- !) => (I' is I + 1, elim_pos_ctx_aux XS I' A B).
    elim_pos_ctx_aux [] _ A B :- copy A B.

pred elim_pos_ctx i: goal-ctx, i: term, o: term. 
    elim_pos_ctx Ctx A B :- elim_pos_ctx_aux Ctx 0 A B.

pred pos_ctx_to_var_in_term_aux i: goal-ctx, i: list term, o: list term.
    pos_ctx_to_var_in_term_aux Ctx [(pos_ctx N)| XS] [X|XS'] :- !, pos_ctx_to_var_in_term_aux Ctx XS XS', nth N Ctx (decl X _ _).
    pos_ctx_to_var_in_term_aux Ctx [(app L)| XS] [app L'|XS'] :- !, std.map L (pos_ctx_to_var Ctx) L',
        pos_ctx_to_var_in_term_aux Ctx XS XS'. 
    pos_ctx_to_var_in_term_aux Ctx [T|XS] [T| XS'] :- pos_ctx_to_var_in_term_aux Ctx XS XS'.
    pos_ctx_to_var_in_term_aux _Ctx [] []. 

pred pos_ctx_to_var_in_term i: goal-ctx, i:(list (pair term (list term))), o: list (pair term (list term)).
    pos_ctx_to_var_in_term Ctx L1 L2 :-  std.unzip L1 LT LI, std.map LI (pos_ctx_to_var_in_term_aux Ctx) L2', std.zip LT L2' L2.

pred type_global i: term, o: term.
  type_global (global (indt I)) Ty :- coq.env.indt I _ _ _ Ty _ _.
  type_global (global (indc C)) Ty :- coq.env.indc C _ _ _ Ty.

pred ctx_to_tys i: goal-ctx, o: list term.
    ctx_to_tys [(decl _ _ Ty)|XS] [Ty|R] :- ctx_to_tys XS R.
    ctx_to_tys [(def _ _ _ Bo)|XS] [Bo|R] :- ctx_to_tys XS R.
    ctx_to_tys [] [].

pred ctx_to_trms i: goal-ctx, o: list term.     
    ctx_to_trms [(decl X _ _)|XS] [X|R] :- ctx_to_trms XS R.
    ctx_to_trms [(def X _ _ _)|XS] [X|R] :- ctx_to_trms XS R.
    ctx_to_trms [] [].

pred ctx_to_hyps i: goal-ctx, o: list term.
    ctx_to_hyps [(decl _ _ Ty)|XS] [Ty|R] :- coq.typecheck Ty {{ Prop }} ok, ctx_to_hyps XS R.
    ctx_to_hyps [_|XS] R :- ctx_to_hyps XS R.
    ctx_to_hyps [] [].    

pred codomain i:term, o:term.
  codomain (prod Na Ty F) R :- !, pi x\ decl x Na Ty => codomain (F x) R. 
  codomain T T.

pred is_not_prop i: term, o: diagnostic.
  is_not_prop T ok :- not (coq.unify-leq T {{Prop}} ok).

pred codomain_not_prop i: term, o: diagnostic.
  codomain_not_prop (prod Na Ty F) D :- !, pi x\ decl x Na Ty => codomain_not_prop (F x) D.
  codomain_not_prop T ok :- !, is_not_prop T ok.

pred get_number_of_parameters i: term, o: int.
    get_number_of_parameters (global (indt I)) NB :- coq.env.indt I _ NB _ _ _ _.
    get_number_of_parameters (global (indc C)) NB :- coq.env.indc C NB _ _ _.
    get_number_of_parameters _ 0.

pred tuple_to_list i: term, o: (list term).
    tuple_to_list {{ pair lp:P1 lp:P2 }} R :- !, tuple_to_list P1 R1, tuple_to_list P2 R2,
        std.append R1 R2 R.
    tuple_to_list T [T].

pred singl_tuple_to_list i: (list argument), o: (list term).
    singl_tuple_to_list [trm T] R :- tuple_to_list T R.
    singl_tuple_to_list [] [].

pred add_if_polymorphic i: term, i: (list term), o: (list term).
    add_if_polymorphic ((prod _Na Ty _Bod) as T) L [T | L] :- coq.unify-eq Ty {{ Type }} ok.
    add_if_polymorphic _ L L.

pred is_polymorphic i: pair term term.
    is_polymorphic (pr _ (prod _Na Ty _F)) :- coq.unify-eq Ty {{ Type }} ok.

pred polymorphic_hypotheses i: (list (pair term term)), o: (list (pair term term)).
    polymorphic_hypotheses L R :- std.filter L is_polymorphic R.

pred collect_hypotheses_from_context i: goal-ctx, o: list term, o: list (pair term term).
    collect_hypotheses_from_context [(decl X _ Ty)| XS] [Ty|R] [pr X Ty|R'] :- !, collect_hypotheses_from_context XS R R'.
    collect_hypotheses_from_context [def _ _ _ _ | XS] R R' :- !, collect_hypotheses_from_context XS R R'.
    collect_hypotheses_from_context [] [] [].

pred find_pos_in_context_aux i: goal-ctx, i: term, i: int, o: term.
    find_pos_in_context_aux [(decl T' _ _)| _XS] T N (pos_ctx N) :- coq.unify-eq T' T ok. 
    find_pos_in_context_aux [(decl _T' _ _)| XS] T N R :- !, M is N + 1, find_pos_in_context_aux XS T M R.
    find_pos_in_context_aux [(def T' _ _ _) | _XS] T N (pos_ctx N) :- coq.unify-eq T' T ok. 
    find_pos_in_context_aux [(def _T' _ _ _)| XS] T N R :- !, M is N + 1, find_pos_in_context_aux XS T M R.
    find_pos_in_context_aux [] T _  T.

pred find_pos_in_context i: goal-ctx, i: term, o: term.
    find_pos_in_context Ctx (app L) (app L') :- !,
        std.map L (x\ find_pos_in_context_aux Ctx x 0) L'.
    find_pos_in_context Ctx T Inst :- find_pos_in_context_aux Ctx T 0 Inst.

pred append_nodup i: list A, i: list A, o: list A.
    append_nodup [X|XS] Y R :- append_nodup XS Y R, std.mem! R X.
    append_nodup [X|XS] Y [X|R] :- !, append_nodup XS Y R.
    append_nodup [] Y Y.

pred find_occurences_aux i: list A, i: A, i: int, o: list int.
    find_occurences_aux [X|XS] X N [N|R] :- !,  M is N + 1, find_occurences_aux XS X M R.
    find_occurences_aux [_Y |XS] X N R :- M is N + 1, find_occurences_aux XS X M R.
    find_occurences_aux [] _X _N [].

pred find_occurences i: list A, i: A, o: list int.
    find_occurences L X R :- find_occurences_aux L X 0 R.  

pred nth i:int, i:list A, o:A. % a version of nth with no fatal error to handle backtracking
    nth 0 [X|_ ] R :- !, X = R.
    nth N [_|XS] R :- N > 0, !, N1 is N - 1, nth N1 XS R.

pred argument_to_term i: list argument, o: list (pair term term).
    argument_to_term [trm T| XS] [pr T Ty|R] :- !, coq.typecheck T Ty ok, argument_to_term XS R.
    argument_to_term [] [].

pred term_to_argument i: list term, o: list argument.
    term_to_argument [T| XS] [trm T|R] :- !, term_to_argument XS R.
    term_to_argument [] [].